import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.preprocessing import LabelEncoder

st.title('üêß Penguin Species Classification')
st.write('### –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–∏–¥–æ–≤ –ø–∏–Ω–≥–≤–∏–Ω–æ–≤')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("https://raw.githubusercontent.com/dataprofessor/data/master/penguins_cleaned.csv")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("–§–∏–ª—å—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
island_filter = st.sidebar.multiselect('–û—Å—Ç—Ä–æ–≤–∞', df['island'].unique(), default=df['island'].unique())
gender_filter = st.sidebar.multiselect('–ü–æ–ª', df['sex'].unique(), default=df['sex'].unique())

filtered_df = df[(df['island'].isin(island_filter)) & (df['sex'].isin(gender_filter))]

st.write("### –î–∞–Ω–Ω—ã–µ –ø–∏–Ω–≥–≤–∏–Ω–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
st.dataframe(filtered_df)

# –ì—Ä–∞—Ñ–∏–∫–∏
st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
fig1 = px.scatter(filtered_df, x='flipper_length_mm', y='body_mass_g', color='species', title='–†–∞–∑–º–µ—Ä –∫—Ä—ã–ª–∞ vs –ú–∞—Å—Å–∞ —Ç–µ–ª–∞')
st.plotly_chart(fig1)

fig2 = px.box(filtered_df, x='species', y='bill_length_mm', color='species', title='–î–ª–∏–Ω–∞ –∫–ª—é–≤–∞ –ø–æ –≤–∏–¥–∞–º')
st.plotly_chart(fig2)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X = df.drop(columns=['species'])
y = df['species']
label_encoders = {}

for col in ['island', 'sex']:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)
model.fit(X_train, y_train)

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
island_input = st.sidebar.selectbox('–û—Å—Ç—Ä–æ–≤', df['island'].unique())
bill_length_input = st.sidebar.slider('–î–ª–∏–Ω–∞ –∫–ª—é–≤–∞ (–º–º)', float(df['bill_length_mm'].min()), float(df['bill_length_mm'].max()), float(df['bill_length_mm'].mean()))
bill_depth_input = st.sidebar.slider('–ì–ª—É–±–∏–Ω–∞ –∫–ª—é–≤–∞ (–º–º)', float(df['bill_depth_mm'].min()), float(df['bill_depth_mm'].max()), float(df['bill_depth_mm'].mean()))
flipper_length_input = st.sidebar.slider('–î–ª–∏–Ω–∞ –∫—Ä—ã–ª–∞ (–º–º)', float(df['flipper_length_mm'].min()), float(df['flipper_length_mm'].max()), float(df['flipper_length_mm'].mean()))
body_mass_input = st.sidebar.slider('–ú–∞—Å—Å–∞ —Ç–µ–ª–∞ (–≥)', float(df['body_mass_g'].min()), float(df['body_mass_g'].max()), float(df['body_mass_g'].mean()))
gender_input = st.sidebar.selectbox('–ü–æ–ª', df['sex'].unique())

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º
input_data = pd.DataFrame({
    'island': [label_encoders['island'].transform([island_input])[0]],
    'bill_length_mm': [bill_length_input],
    'bill_depth_mm': [bill_depth_input],
    'flipper_length_mm': [flipper_length_input],
    'body_mass_g': [body_mass_input],
    'sex': [label_encoders['sex'].transform([gender_input])[0]]
})

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
prediction = model.predict(input_data)[0]
prediction_proba = model.predict_proba(input_data)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
st.write(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∏–¥:** {prediction}")

df_prediction_proba = pd.DataFrame(prediction_proba, columns=model.classes_)
st.bar_chart(df_prediction_proba.T)
